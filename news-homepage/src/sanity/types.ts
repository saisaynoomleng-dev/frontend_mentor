/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Navlink = {
  _id: string;
  _type: "navlink";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  linkName?: string;
  url?: string;
};

export type NavMenu = {
  _id: string;
  _type: "navMenu";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  link?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "navlink";
  }>;
};

export type NewPost = {
  _id: string;
  _type: "newPost";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  subtitle?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  category?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  publishedAt?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  _type: "image";
  _key: string;
}>;

export type Blog = {
  _id: string;
  _type: "blog";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  category?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  publishedAt?: string;
  subtitle?: string;
  description?: BlockContent;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  description?: string;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Navlink | NavMenu | NewPost | BlockContent | Blog | Category | Author | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: BLOGS_QUERY
// Query: *[_type == 'blog' && defined(slug.current)][0...3]{  slug,  title,  subtitle,  publishedAt,  author->{    name  },  image{    asset->{      url    }  } } | order(publishedAt desc)
export type BLOGS_QUERYResult = Array<{
  slug: Slug | null;
  title: string | null;
  subtitle: string | null;
  publishedAt: string | null;
  author: {
    name: string | null;
  } | null;
  image: {
    asset: {
      url: string | null;
    } | null;
  } | null;
}>;
// Variable: BLOG_QUERY
// Query: *[_type == 'blog' && slug.current == $slug][0]{  slug,  category->{    name},  title,  description,  publishedAt,  author->{    name,    description  },  image{    asset->{      url    }  } }
export type BLOG_QUERYResult = {
  slug: Slug | null;
  category: {
    name: string | null;
  } | null;
  title: string | null;
  description: BlockContent | null;
  publishedAt: string | null;
  author: {
    name: string | null;
    description: string | null;
  } | null;
  image: {
    asset: {
      url: string | null;
    } | null;
  } | null;
} | null;
// Variable: NEW_POSTS_QUERY
// Query: *[_type == 'newPost' && defined(slug.current)][0...3]{    title,    subtitle,    publishedAt,    category->{      name    },    slug,    author->{      name    } } | order(publishedAt desc)
export type NEW_POSTS_QUERYResult = Array<{
  title: string | null;
  subtitle: string | null;
  publishedAt: string | null;
  category: {
    name: string | null;
  } | null;
  slug: Slug | null;
  author: {
    name: string | null;
  } | null;
}>;
// Variable: NEW_POST_QUERY
// Query: *[_type == 'newPost' && slug.current == $slug][0]{    title,    subtitle,    publishedAt,    description,    category->{      name    },    author->{      name,      description    } }
export type NEW_POST_QUERYResult = {
  title: string | null;
  subtitle: string | null;
  publishedAt: string | null;
  description: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }> | null;
  category: {
    name: string | null;
  } | null;
  author: {
    name: string | null;
    description: string | null;
  } | null;
} | null;
// Variable: MAIN_NAV_QUERY
// Query: *[_type == 'navMenu'   && slug.current == 'main-nav-menu'][0]{    link[]->{      linkName,      url    }   }
export type MAIN_NAV_QUERYResult = {
  link: Array<{
    linkName: string | null;
    url: string | null;
  }> | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == 'blog'\n && defined(slug.current)][0...3]{\n  slug,\n  title,\n  subtitle,\n  publishedAt,\n  author->{\n    name\n  },\n  image{\n    asset->{\n      url\n    }\n  }\n } | order(publishedAt desc)": BLOGS_QUERYResult;
    "*[_type == 'blog'\n && slug.current == $slug][0]{\n  slug,\n  category->{\n    name},\n  title,\n  description,\n  publishedAt,\n  author->{\n    name,\n    description\n  },\n  image{\n    asset->{\n      url\n    }\n  }\n }": BLOG_QUERYResult;
    "*[_type == 'newPost'\n && defined(slug.current)][0...3]{\n    title,\n    subtitle,\n    publishedAt,\n    category->{\n      name\n    },\n    slug,\n    author->{\n      name\n    }\n } | order(publishedAt desc)": NEW_POSTS_QUERYResult;
    "*[_type == 'newPost'\n && slug.current == $slug][0]{\n    title,\n    subtitle,\n    publishedAt,\n    description,\n    category->{\n      name\n    },\n    author->{\n      name,\n      description\n    }\n }": NEW_POST_QUERYResult;
    "*[_type == 'navMenu'\n   && slug.current == 'main-nav-menu'][0]{\n    link[]->{\n      linkName,\n      url\n    }\n   }": MAIN_NAV_QUERYResult;
  }
}
